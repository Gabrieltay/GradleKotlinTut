/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

//import io.gitlab.arturbosch.detekt.extensions.DetektExtension
import org.gradle.jvm.tasks.Jar

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath(kotlin("gradle-plugin", version = "1.3.31"))
    }
}

repositories {
    jcenter()
}


plugins {
    java
    jacoco
    kotlin("jvm") version "1.3.31"
    id("com.gradle.build-scan") version "2.1"
    id("org.jetbrains.dokka") version "0.9.17"
    id("io.gitlab.arturbosch.detekt") version "1.0.0-RC14"
}

group = "org.example"
version = "0.0.1"

val ktlint by configurations.creating

dependencies {
    ktlint("com.pinterest:ktlint:0.32.0")
    implementation(kotlin("stdlib"))
    testImplementation("junit:junit:4.12")
}

buildScan {
    termsOfServiceUrl = "https://gradle.com/terms-of-service"
    termsOfServiceAgree = "yes"

    publishAlways()
}

jacoco {
    toolVersion = "0.8.3"
    reportsDir = file("$buildDir/reports/jacoco")
}

tasks.dokka {
    outputFormat = "html"
    outputDirectory = "$buildDir/javadoc"
}

tasks.create<Copy>("copy") {
    description = "Copies sources to the dest directory"
    group = "Custom"
    from("src")
    into("dest")
}

tasks.create<Zip>("zip") {
    description = "Archives sources in a zip file"
    group = "Archive"
    from("src")
    setArchiveName("basic-demo-1.0.zip")
}

tasks.create<JavaExec>("ktlint") {
    description = "Check Kotlin code styles"
    group = "verification"
    main = "com.pinterest.ktlint.Main"
    classpath = ktlint
    args("src/**/*.kt")
}

tasks.create<JavaExec>("ktlintFormat") {
    description = "Fix Kotlin code style deviations"
    group = "formatting"
    main = "com.pinterest.ktlint.Main"
    classpath = ktlint
    args("-F", "src/**/*.kt")
}

task<io.gitlab.arturbosch.detekt.Detekt>("detektFast") {
    description = "Check Kotlin code static analysis"
    group = "verification"
    input = files("src/main/kotlin", "src/test/kotlin")
    config = files("$rootDir/detekt.yml")
    debug = true
}


tasks.jacocoTestReport {
    reports {
        xml.isEnabled = false
        csv.isEnabled = false
        html.destination = file("${buildDir}/jacocoHtml")
    }
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = "1.00".toBigDecimal()
            }
        }
    }
}

tasks.check {
    dependsOn("ktlint")
}

tasks.check {
    dependsOn("detektFast")
}

tasks.check {
    dependsOn(tasks.jacocoTestCoverageVerification)
}

tasks.jacocoTestCoverageVerification {
    dependsOn(tasks.jacocoTestReport)
}